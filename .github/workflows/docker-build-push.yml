name: Docker Build and Push

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-platforms:
    runs-on: ubuntu-latest
    environment: build
    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Install Railpack
        run: curl -sSL https://railpack.com/install.sh | sh

      - name: Railpack prepare
        run: railpack prepare . --plan-out railpack-plan.json --info-out railpack-info.json

      - name: Railpack build
        run: |
          PLATFORM_TAG=$(echo ${{ matrix.platform }} | sed 's/\//_/g')
          docker buildx build \
            --build-arg BUILDKIT_SYNTAX="ghcr.io/railwayapp/railpack-frontend" \
            -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest-$PLATFORM_TAG \
            -f railpack-plan.json \
            --platform ${{ matrix.platform }} \
            --push \
            .

  create-manifest:
    needs: build-platforms
    runs-on: ubuntu-latest
    environment: build
    permissions:
      contents: read
      packages: write

    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Create and push manifest
        run: |
          # Get digests
          AMD64_DIGEST=$(docker buildx imagetools inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest-linux_amd64 | grep "Name:" | awk '{print $2}')
          ARM64_DIGEST=$(docker buildx imagetools inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest-linux_arm64 | grep "Name:" | awk '{print $2}')

          echo "AMD64 digest: ${AMD64_DIGEST}"
          echo "ARM64 digest: ${ARM64_DIGEST}"

          # Create manifest
          docker manifest create ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest \
            ${AMD64_DIGEST} \
            ${ARM64_DIGEST}

          # Annotate
          docker manifest annotate ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest \
            ${AMD64_DIGEST} --os linux --arch amd64

          docker manifest annotate ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest \
            ${ARM64_DIGEST} --os linux --arch arm64

          # Push manifest
          docker manifest push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
